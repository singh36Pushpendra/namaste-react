Minify, optimize, lot of processing before pushing to production.

Lot of other packages need to make our app fast not just react.

npm -> package manager

package manager = dependencies 

npm will take care of version in package.json

Bundler is the most important package in our project.
(needs to be clean, compressed, minify)

Bundler -> bundles your app.

Will be using Parcel(Bundler like webpack, vite etc..) for this project.

There are two types of dependencies
dev dependency -> required in a development phase.
normal dependency -> used in production also.

We will do parcel as a dev dependency.
npm install -D parcel

package.json -> Configuration of npm -> Keeps track of all the dependencies, approx
version.


^ -> caret -> Parcel will automatically update its version (minor version)
~ -> Major version automatically

package-lock.json ->
Keeps a track of exact version. (logs the version, keeps record)

node_modules -> contains all the code fetched by npm.
(Kind of a database, all packages exist)

Our project has dependency Parcel, Parcel as a project has its own dependency
(transitive dependency)

Parcel uses Babel.

If we have package.json & package-lock.json, then we
can regenerate our project node-modules.

We can regenerate if we delete node_modules ->
npm install

npx -> means if we wan't to execute a package.
Executed the parcel(Bundler)
npx parcel index.html 

Not a prefered way.
<script
      crossorigin
      src="https://unpkg.com/react@18/umd/react.development.js"
    ></script>
    <script
      crossorigin
      src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"
    ></script>
    <script src="App.js"></script>

i == install
npm install react
npm i react-dom


dist -> contains files generated by parcel

definitely work whatever version provides
but may or may not work for other.
  "browserslist": [
    "last 2 Chrome version",
    "last 2 Firefox version"
  ]